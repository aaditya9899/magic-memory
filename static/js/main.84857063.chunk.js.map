{"version":3,"sources":["components/SingleCard.js","App.js","index.js"],"names":["SingleCard","card","handleChoice","flipped","disabled","className","src","alt","onClick","cardImages","matched","App","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","id","useEffect","prevCards","resetTurn","setTimeout","console","log","prevTurns","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQACe,SAASA,EAAT,GAA2D,IAAtCC,EAAqC,EAArCA,KAAKC,EAAgC,EAAhCA,aAAaC,EAAmB,EAAnBA,QAAQC,EAAW,EAAXA,SAS1D,OACQ,qBAAKC,UAAU,OAAf,SACH,sBAAKA,UAAWF,EAAU,UAAW,GAArC,UACD,qBAAKE,UAAU,QAAQC,IAAKL,EAAKK,IAAKC,IAAI,eAC1C,qBAAKF,UAAU,OAAOC,IAAI,iBAAiBE,QAX7B,WACVJ,GACAF,EAAaD,IAS+CM,IAAI,mBCV5E,IAAME,EAAY,CAChB,CAAC,IAAO,oBAAsBC,SAAS,GACvC,CAAC,IAAO,oBAAqBA,SAAS,GACtC,CAAC,IAAO,kBAAmBA,SAAS,GACpC,CAAC,IAAO,oBAAqBA,SAAS,GACtC,CAAC,IAAO,oBAAqBA,SAAS,GACtC,CAAC,IAAO,mBAAoBA,SAAS,IAmGxBC,MA/Ff,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsBF,mBAAS,GAA/B,mBAAMG,EAAN,KAAYC,EAAZ,KACA,EAA8BJ,mBAAS,MAAvC,mBAAMK,EAAN,KAAgBC,EAAhB,KACA,EAA8BN,mBAAS,MAAvC,mBAAMO,EAAN,KAAgBC,EAAhB,KACA,EAA4BR,oBAAS,GAArC,mBAAMR,EAAN,KAAeiB,EAAf,KAIMC,EAAe,WACnB,IAAMC,EAAgB,UAAId,EAAcA,GACvCe,MAAK,kBAAKC,KAAKC,SAAW,MAC1BC,KAAI,SAAC1B,GAAD,mBAAC,eAAaA,GAAd,IAAoB2B,GAAGH,KAAKC,cAGjCR,EAAa,MACbE,EAAa,MACbN,EAASS,GACTP,EAAS,IAKLd,EAAa,SAACD,GAClBgB,EAAYG,EAAanB,GAAMiB,EAAajB,IAI9C4B,qBAAU,WACLZ,GAAaE,IAEdE,GAAY,GACTJ,EAAUX,MAAMa,EAAUb,KAE5BQ,GAAS,SAAAgB,GACP,OAAOA,EAAUH,KAAI,SAAA1B,GACpB,OAAGA,EAAKK,MAAMW,EAAUX,IACf,2BAAIL,GAAX,IAAgBS,SAAQ,IAIjBT,QAIX8B,KAMMC,YAAW,kBAAID,MAAY,QAIrC,CAACd,EAAUE,IACZc,QAAQC,IAAIrB,GAGb,IAAMkB,EAAU,WACdb,EAAa,MACbE,EAAa,MACbJ,GAAS,SAAAmB,GAAS,OAAEA,EAAU,KAC9Bd,GAAY,IAWd,OANCQ,qBAAU,WACRP,MACA,IAKD,sBAAKjB,UAAU,MAAf,UACE,6CACA,wBAAQG,QAASc,EAAjB,sBACA,qBAAKjB,UAAU,YAAf,SACCQ,EAAMc,KAAI,SAAA1B,GAAI,OACb,cAAC,EAAD,CAA0BA,KAAMA,EAAMC,aAAcA,EACpDC,QAASF,IAAOgB,GAAWhB,IAAOkB,GAAWlB,EAAKS,QAClDN,SAAUA,GAFOH,EAAK2B,SAO1B,uCACSb,SCjGbqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.84857063.chunk.js","sourcesContent":["import './SingleCard.css' \r\nexport default function SingleCard({card,handleChoice,flipped,disabled}) {\r\n    \r\n    const handleClick=()=>{\r\n        if(!disabled){\r\n            handleChoice(card)\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n            <div className=\"card\">\r\n         <div className={flipped ? \"flipped\": \"\" }>\r\n        <img className=\"front\" src={card.src} alt=\"card front\"/>\r\n        <img className=\"back\" src=\"/img/cover.png\" onClick={handleClick}alt=\"card back\"/>\r\n         </div>\r\n        </div>\r\n            \r\n        \r\n    )\r\n}\r\n\r\n","import { useEffect, useState } from 'react'\nimport './App.css'\nimport SingleCard from './components/SingleCard'\n\nconst cardImages =[\n  {\"src\": \"/img/helmet-1.png\",  matched: false},\n  {\"src\": \"/img/potion-1.png\", matched: false},\n  {\"src\": \"/img/ring-1.png\" ,matched: false},\n  {\"src\": \"/img/scroll-1.png\" ,matched: false},\n  {\"src\": \"/img/shield-1.png\", matched: false},\n  {\"src\": \"/img/sword-1.png\", matched: false}\n\n]\n\nfunction App() {\n  const [cards,setCards]= useState([])\n  const[turns,setTurns]=useState(0)\n  const[choiceOne,setChoiceOne]=useState(null)\n  const[choiceTwo,setChoiceTwo]=useState(null)\n  const[disabled,setDisabled]=useState(false)\n\n\n\n  const shuffleCards = () =>{\n    const shuffledCards = [...cardImages,...cardImages]\n    .sort(() =>Math.random() - 0.5)\n    .map((card)=> ({...card ,id:Math.random() } ))\n\n\n    setChoiceOne(null)\n    setChoiceTwo(null)\n    setCards(shuffledCards)\n    setTurns(0)\n\n\n  }\n  //handle a choice\n  const handleChoice=(card) =>{\n    choiceOne ? setChoiceTwo(card):setChoiceOne(card)\n     \n  }\n  //compare two selected cards\n  useEffect(()=>{\n    if(choiceOne && choiceTwo)\n    {\n      setDisabled(true)\n      if(choiceOne.src===choiceTwo.src)\n      {\n       setCards(prevCards=>{\n         return prevCards.map(card=> {\n          if(card.src===choiceOne.src){\n            return {...card,matched:true}\n          }\n        \n          else{\n            return card \n          }\n       })\n      })\n        resetTurn()\n    }\n      \n            \n            else{\n              \n              setTimeout(()=>resetTurn(),1000)\n            }\n          }\n\n  },[choiceOne,choiceTwo])\n   console.log(cards)\n  \n  //reset choice\n  const resetTurn=()=>{\n    setChoiceOne(null)\n    setChoiceTwo(null)\n    setTurns(prevTurns=>prevTurns+1)\n    setDisabled(false)\n\n  }\n\n   // start a new game automatically\n   useEffect(()=>{\n     shuffleCards()\n   },[])\n\n\n\n  return (\n    <div className=\"App\">\n      <h1>Magic Match</h1>\n      <button onClick={shuffleCards}>New Game</button>\n      <div className=\"card-grid\">\n      {cards.map(card=>(\n        <SingleCard key={card.id} card={card} handleChoice={handleChoice}\n        flipped={card===choiceOne||card===choiceTwo||card.matched}\n        disabled={disabled}\n        />\n\n      ))}\n    </div>\n    <p>\n      Turns:{turns}\n    </p>\n    </div>\n    \n    );\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}